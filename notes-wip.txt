These instructions are *not* complete, but they should give you an idea of how the process works along
with the git diff.

how to use primitiveMaker
prim.cpp == vm/src/any/prims/prim.cpp
Replace <thing> with whatever name you want.

1. Make <thing>_glue.cpp in objects/glue/ and add glue code.
<thing>_glue.cpp must contain at least:
`
#include "_glueDefs.cpp.incl"
#include "<thing>.primMaker.hh"

// Your code goes here.

#define WHAT_GLUE FUNCTIONS
    <thing>_glue
#undef WHAT_GLUE
`

2. Make a template file
  1. Add a file named <thing>Templates.self to `objects/glue/`.
  2. Add to this file according to the comment on `globals primitiveMaker` and by
     referencing other template files in `objects/glue/`.

3. Generate primitives & wrappers from the template
  1. cd into `objects/` and run the vm with at least a basic world filed in.
  2. Evaluate `glue/<thing>Templates.self` runScript.
  3. Add wrapper prototypes to prim.cpp (search xlib_glue    in prim.cpp to find the spot).
  4. Add glue_entries to prim.cpp       (search xlib_entries in prim.cpp to find the spot).
  5. Add #include "<thing>.primMaker.hh" to vm/src/unix/prims/include_glue_unix.hh

4. Load generated self wrappers into world
  1. cd to self-root/objects/ and run the vm with at least a basic world filed in.
  2. Ensure appropriate objects exist at the paths specified by `traits: <path>` lines in
     <thing>Templates.self
     You may have to create the objects specified at the paths so the if you haven't loaded the wrappers into this world before.
     This is needed so primitiveMaker has an object to add the methods it generates to.
     The objects it will add methods to are specified with `traits: object path here' in <thing>Templates.self.
     The <thing>_wrappers module should only contain slots generated by the primitiveMaker, i.e. you should never add slots
     to it manually. The reason is that primitiveMaker overwrites the previous filed out module every time it is run.
  3. evaluate 'glue/<thing>_wrappers.self' runScript

After step 4 you can call your glue code from the self vm.
If you want to load your wrappers into another snapshot you can repeat step 4.3.
The wrappers just provide a nicer interface for calling the primitives. You don't have to load the wrappers
to call the primitives if you don't want to.

